// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getLogLikelihoodC
double getLogLikelihoodC(NumericVector vPatternList, NumericVector vSparseCount, NumericVector vF, NumericVector vQ, NumericVector fdim, int signatureNum, int sampleNum, int patternNum, int samplePatternNum, bool isBackground, NumericVector vF0);
RcppExport SEXP _selectKSigs_getLogLikelihoodC(SEXP vPatternListSEXP, SEXP vSparseCountSEXP, SEXP vFSEXP, SEXP vQSEXP, SEXP fdimSEXP, SEXP signatureNumSEXP, SEXP sampleNumSEXP, SEXP patternNumSEXP, SEXP samplePatternNumSEXP, SEXP isBackgroundSEXP, SEXP vF0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vPatternList(vPatternListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vSparseCount(vSparseCountSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vF(vFSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vQ(vQSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fdim(fdimSEXP);
    Rcpp::traits::input_parameter< int >::type signatureNum(signatureNumSEXP);
    Rcpp::traits::input_parameter< int >::type sampleNum(sampleNumSEXP);
    Rcpp::traits::input_parameter< int >::type patternNum(patternNumSEXP);
    Rcpp::traits::input_parameter< int >::type samplePatternNum(samplePatternNumSEXP);
    Rcpp::traits::input_parameter< bool >::type isBackground(isBackgroundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vF0(vF0SEXP);
    rcpp_result_gen = Rcpp::wrap(getLogLikelihoodC(vPatternList, vSparseCount, vF, vQ, fdim, signatureNum, sampleNum, patternNum, samplePatternNum, isBackground, vF0));
    return rcpp_result_gen;
END_RCPP
}
// convertToTurbo_Q
NumericVector convertToTurbo_Q(NumericVector vQ, int signatureNum, int sampleNum);
RcppExport SEXP _selectKSigs_convertToTurbo_Q(SEXP vQSEXP, SEXP signatureNumSEXP, SEXP sampleNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vQ(vQSEXP);
    Rcpp::traits::input_parameter< int >::type signatureNum(signatureNumSEXP);
    Rcpp::traits::input_parameter< int >::type sampleNum(sampleNumSEXP);
    rcpp_result_gen = Rcpp::wrap(convertToTurbo_Q(vQ, signatureNum, sampleNum));
    return rcpp_result_gen;
END_RCPP
}
// convertToTurbo_F
NumericVector convertToTurbo_F(NumericVector vF, NumericVector fdim, int signatureNum, bool isBackground);
RcppExport SEXP _selectKSigs_convertToTurbo_F(SEXP vFSEXP, SEXP fdimSEXP, SEXP signatureNumSEXP, SEXP isBackgroundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vF(vFSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fdim(fdimSEXP);
    Rcpp::traits::input_parameter< int >::type signatureNum(signatureNumSEXP);
    Rcpp::traits::input_parameter< bool >::type isBackground(isBackgroundSEXP);
    rcpp_result_gen = Rcpp::wrap(convertToTurbo_F(vF, fdim, signatureNum, isBackground));
    return rcpp_result_gen;
END_RCPP
}
// convertFromTurbo_Q
NumericVector convertFromTurbo_Q(NumericVector turboQ, int signatureNum, int sampleNum);
RcppExport SEXP _selectKSigs_convertFromTurbo_Q(SEXP turboQSEXP, SEXP signatureNumSEXP, SEXP sampleNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type turboQ(turboQSEXP);
    Rcpp::traits::input_parameter< int >::type signatureNum(signatureNumSEXP);
    Rcpp::traits::input_parameter< int >::type sampleNum(sampleNumSEXP);
    rcpp_result_gen = Rcpp::wrap(convertFromTurbo_Q(turboQ, signatureNum, sampleNum));
    return rcpp_result_gen;
END_RCPP
}
// convertFromTurbo_F
NumericVector convertFromTurbo_F(NumericVector turboF, NumericVector fdim, int signatureNum, bool isBackground);
RcppExport SEXP _selectKSigs_convertFromTurbo_F(SEXP turboFSEXP, SEXP fdimSEXP, SEXP signatureNumSEXP, SEXP isBackgroundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type turboF(turboFSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fdim(fdimSEXP);
    Rcpp::traits::input_parameter< int >::type signatureNum(signatureNumSEXP);
    Rcpp::traits::input_parameter< bool >::type isBackground(isBackgroundSEXP);
    rcpp_result_gen = Rcpp::wrap(convertFromTurbo_F(turboF, fdim, signatureNum, isBackground));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_selectKSigs_getLogLikelihoodC", (DL_FUNC) &_selectKSigs_getLogLikelihoodC, 11},
    {"_selectKSigs_convertToTurbo_Q", (DL_FUNC) &_selectKSigs_convertToTurbo_Q, 3},
    {"_selectKSigs_convertToTurbo_F", (DL_FUNC) &_selectKSigs_convertToTurbo_F, 4},
    {"_selectKSigs_convertFromTurbo_Q", (DL_FUNC) &_selectKSigs_convertFromTurbo_Q, 3},
    {"_selectKSigs_convertFromTurbo_F", (DL_FUNC) &_selectKSigs_convertFromTurbo_F, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_selectKSigs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
